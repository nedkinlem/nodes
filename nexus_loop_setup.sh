#!/usr/bin/env bash
# Nexus CLI loop runner (Docker)
# Usage:
#   ./nexus_loop_setup.sh install     # –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –æ–±—Ä–∞–∑ —ñ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ loop-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
#   ./nexus_loop_setup.sh start       # —Å—Ç–∞—Ä—Ç —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
#   ./nexus_loop_setup.sh stop        # —Å—Ç–æ–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
#   ./nexus_loop_setup.sh restart     # —Ä–µ—Å—Ç–∞—Ä—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
#   ./nexus_loop_setup.sh logs        # –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (follow)
#   ./nexus_loop_setup.sh status      # —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
#   ./nexus_loop_setup.sh remove      # –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
#   ./nexus_loop_setup.sh update      # pull –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑—É —Ç–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞
#   ./nexus_loop_setup.sh help        # –¥–æ–ø–æ–º–æ–≥–∞

set -euo pipefail

# ====== –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ======
IMAGE_BASE="nexusxyz/nexus-cli:latest"  # –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–∞–∑–æ–≤–∏–π –æ–±—Ä–∞–∑
SLEEP_BETWEEN_RUNS="30"                 # –ø–∞—É–∑–∞ –º—ñ–∂ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ CLI (—Å–µ–∫)

# —è–∫—â–æ NODE_ID –Ω–µ –∑–∞–¥–∞–Ω–æ –∑–º—ñ–Ω–Ω–æ—é —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ‚Äî –∑–∞–ø–∏—Ç–∞—î–º–æ
NODE_ID="${NODE_ID:-}"
if [[ "${1:-}" != "help" && -z "${NODE_ID}" ]]; then
  read -rp "üîë –í–≤–µ–¥—ñ—Ç—å –≤–∞—à NODE ID: " NODE_ID
fi

# —ñ–º–µ–Ω–∞ —Ç–∞ —à–ª—è—Ö–∏, —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–ª—è NODE_ID
TAG="nexus-loop-cli-${NODE_ID}"
CONTAINER="nexus_${NODE_ID}"
BUILD_DIR="${HOME}/nexus_loop_build_${NODE_ID}"

# ====== –¥–æ–ø–æ–º—ñ–∂–Ω—ñ ======
need_docker() {
  if ! command -v docker >/dev/null 2>&1; then
    echo "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª—é—é Docker..."
    sudo apt update -y && sudo apt install -y docker.io
  fi
}

ensure_build_dir() {
  mkdir -p "${BUILD_DIR}"
}

write_loop_files() {
  # loop.sh, —è–∫–∏–π –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞—î nexus-cli
  cat > "${BUILD_DIR}/loop.sh" <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
echo "üîÅ Nexus loop-mode –∑–∞–ø—É—â–µ–Ω–æ. NODE_ID=${NODE_ID}"
while true; do
  echo "‚ñ∂Ô∏è  –°—Ç–∞—Ä—Ç nexus-cli..."
  ./nexus-network start --node-id "${NODE_ID}"
  echo "üïê –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${SLEEP_BETWEEN_RUNS}s..."
  sleep "${SLEEP_BETWEEN_RUNS}"
done
EOF
  chmod +x "${BUILD_DIR}/loop.sh"

  # Dockerfile, —è–∫–∏–π –¥–æ–¥–∞—î –Ω–∞—à loop.sh
  cat > "${BUILD_DIR}/Dockerfile" <<EOF
FROM ${IMAGE_BASE}
ENV SLEEP_BETWEEN_RUNS=${SLEEP_BETWEEN_RUNS}
COPY loop.sh /loop.sh
RUN chmod +x /loop.sh
CMD ["/loop.sh"]
EOF
}

build_image() {
  echo "üèó  –ó–±–∏—Ä–∞—é –æ–±—Ä–∞–∑ ${TAG}..."
  ( cd "${BUILD_DIR}" && docker build -t "${TAG}" . )
}

pull_base() {
  echo "‚¨áÔ∏è  –û–Ω–æ–≤–ª—é—é –±–∞–∑–æ–≤–∏–π –æ–±—Ä–∞–∑ ${IMAGE_BASE}..."
  docker pull "${IMAGE_BASE}"
}

stop_container() {
  docker rm -f "${CONTAINER}" >/dev/null 2>&1 || true
}

run_container() {
  echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${CONTAINER} (NODE_ID=${NODE_ID})..."
  docker run -dit \
    --restart unless-stopped \
    --name "${CONTAINER}" \
    -e NODE_ID="${NODE_ID}" \
    "${TAG}"
  echo "‚úÖ –ü—Ä–∞—Ü—é—î. –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –ª–æ–≥–∏:  docker logs -f ${CONTAINER}"
}

case "${1:-install}" in
  install)
    need_docker
    ensure_build_dir
    pull_base
    write_loop_files
    build_image
    stop_container
    run_container
    ;;

  start)
    need_docker
    docker start -ai "${CONTAINER}" || {
      echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: ./$(basename "$0") install"
      exit 1
    }
    ;;

  stop)
    need_docker
    stop_container
    echo "üõë –ó—É–ø–∏–Ω–µ–Ω–æ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${CONTAINER}."
    ;;

  restart)
    need_docker
    stop_container
    run_container
    ;;

  logs)
    need_docker
    docker logs -f "${CONTAINER}"
    ;;

  status)
    need_docker
    docker ps -a --filter "name=${CONTAINER}"
    ;;

  remove)
    need_docker
    stop_container
    echo "üßπ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${CONTAINER} –ø—Ä–∏–±—Ä–∞–Ω–æ. –û–±—Ä–∞–∑ ${TAG} –∑–∞–ª–∏—à–µ–Ω–æ."
    ;;

  update)
    need_docker
    pull_base
    build_image
    echo "üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ –±–∞–∑—É —Ç–∞ –ø–µ—Ä–µ–±—É–¥–æ–≤–∞–Ω–æ ${TAG}. –ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä."
    ;;

  help|-h|--help)
    sed -n '2,40p' "$0"
    ;;

  *)
    echo "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ '$1'. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ: install|start|stop|restart|logs|status|remove|update|help"
    exit 1
    ;;
esac
