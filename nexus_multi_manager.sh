#!/bin/bash
# Nexus Multi Node Manager
# ‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: –∫—ñ–ª—å–∫–∞ –Ω–æ–¥ (–æ–∫—Ä–µ–º—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏), –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, –ª–æ–≥—É–≤–∞–Ω–Ω—è, –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞,
# ‚úÖ SWAP (8G), –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó CLI, —Ç–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π LOOP‚Äë—Ä–µ–∂–∏–º (–∫–∞—Å—Ç–æ–º–Ω–∏–π –æ–±—Ä–∞–∑).
# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –º–∞—é—Ç—å –≤–∏–≥–ª—è–¥: nexus_<NODE_ID>

set -euo pipefail

NEXUS_IMAGE="nexusxyz/nexus-cli:latest"       # –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π CLI-–æ–±—Ä–∞–∑
LOOP_BASE_IMAGE="debian:bookworm-slim"        # –¥–ª—è loop-—Ä–µ–∂–∏–º—É (—î /bin/sh)
SWAP_SIZE_GB="${SWAP_SIZE_GB:-8}"             # —Ä–æ–∑–º—ñ—Ä SWAP
SLEEP_BETWEEN_RUNS="${SLEEP_BETWEEN_RUNS:-30}"# –ø–∞—É–∑–∞ –º—ñ–∂ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ —É loop-—Ä–µ–∂–∏–º—ñ

# --------- helpers ----------
need_docker() {
  if ! command -v docker >/dev/null 2>&1; then
    echo -e "\nüì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker..."
    sudo apt update -y && sudo apt install -y docker.io -y
  fi
}
ok() { echo -e "‚úÖ $*"; }
warn() { echo -e "‚ö†Ô∏è  $*"; }
err() { echo -e "‚ùå $*" >&2; }

container_name_for() {
  echo "nexus_$1"
}

# --------- core actions ----------
install_node() {
  read -rp "üîë –í–≤–µ–¥—ñ—Ç—å –≤–∞—à node ID: " NODE_ID
  local CN; CN=$(container_name_for "$NODE_ID")

  need_docker
  echo -e "\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–∑—É Nexus CLI..."
  docker pull "$NEXUS_IMAGE"

  echo -e "\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–¥–∏ —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ: $CN"
  docker rm -f "$CN" >/dev/null 2>&1 || true
  docker run -dit \
    --restart unless-stopped \
    --name "$CN" \
    -e NODE_ID="$NODE_ID" \
    "$NEXUS_IMAGE" start --node-id "$NODE_ID"

  ok "–ù–æ–¥–∞ $NODE_ID –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —ñ –ø—Ä–∞—Ü—é—î —É —Ñ–æ–Ω—ñ."
  echo "‚ÑπÔ∏è  –í—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è –∑ foreground: Ctrl+P, –ø–æ—Ç—ñ–º Ctrl+Q"
}

update_node() {
  read -rp "üîë –í–≤–µ–¥—ñ—Ç—å –≤–∞—à node ID: " NODE_ID
  local CN; CN=$(container_name_for "$NODE_ID")

  need_docker
  echo -e "\nüì• –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–∞–∑—É Nexus CLI..."
  docker pull "$NEXUS_IMAGE"

  echo -e "\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $CN –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ–º—É –æ–±—Ä–∞–∑—ñ..."
  docker rm -f "$CN" >/dev/null 2>&1 || true
  docker run -dit \
    --restart unless-stopped \
    --name "$CN" \
    -e NODE_ID="$NODE_ID" \
    "$NEXUS_IMAGE" start --node-id "$NODE_ID"

  ok "–ù–æ–¥—É $NODE_ID –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ."
}

start_node() {
  read -rp "üîë –í–≤–µ–¥—ñ—Ç—å –≤–∞—à node ID: " NODE_ID
  local CN; CN=$(container_name_for "$NODE_ID")

  need_docker
  echo -e "\n‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫/–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $CN..."
  if docker ps -a --format '{{.Names}}' | grep -qx "$CN"; then
    docker start "$CN" >/dev/null 2>&1 || true
    docker attach "$CN" || true
  else
    docker run -it --name "$CN" \
      -e NODE_ID="$NODE_ID" \
      "$NEXUS_IMAGE" start --node-id "$NODE_ID"
  fi
}

show_logs() {
  read -rp "üîë –í–≤–µ–¥—ñ—Ç—å –≤–∞—à node ID: " NODE_ID
  local CN; CN=$(container_name_for "$NODE_ID")
  need_docker

  echo -e "\nüìÑ –õ–æ–≥–∏ $CN (Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É):\n"
  if docker ps -a --format '{{.Names}}' | grep -qx "$CN"; then
    docker logs -f "$CN"
  else
    err "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $CN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
  fi
}

list_nodes() {
  need_docker
  echo -e "\nüìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ Nexus:"
  local out
  out=$(docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" | grep -E '^nexus_') || true
  if [[ -z "${out}" ]]; then
    warn "–ù–µ–º–∞—î –∑–∞–ø—É—â–µ–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ Nexus."
  else
    echo "$out"
  fi
  read -rp $'\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é... ' _
}

delete_node() {
  read -rp "üîë –í–≤–µ–¥—ñ—Ç—å –≤–∞—à node ID: " NODE_ID
  local CN; CN=$(container_name_for "$NODE_ID")
  need_docker

  echo -e "\nüóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $CN..."
  docker rm -f "$CN" >/dev/null 2>&1 || true
  ok "–ù–æ–¥—É $NODE_ID –≤–∏–¥–∞–ª–µ–Ω–æ."
}

check_version() {
  need_docker
  echo -e "\nüîé –í–µ—Ä—Å—ñ—è Nexus CLI (—ñ–∑ –æ–±—Ä–∞–∑—É):"
  docker run --rm "$NEXUS_IMAGE" --version || warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é."
  read -rp $'\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é... ' _
}

make_swap() {
  echo -e "\nüíæ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SWAP (${SWAP_SIZE_GB}G)..."
  if swapon --show | grep -q '^/swapfile'; then
    ok "SWAP –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π:"
    swapon --show
    return
  fi

  sudo fallocate -l "${SWAP_SIZE_GB}G" /swapfile
  sudo chmod 600 /swapfile
  sudo mkswap /swapfile
  sudo swapon /swapfile
  grep -q '^/swapfile ' /etc/fstab || echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab >/dev/null
  ok "SWAP —É–≤—ñ–º–∫–Ω–µ–Ω–æ."
  swapon --show
  read -rp $'\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é... ' _
}

diagnose_node() {
  read -rp "üîç –í–≤–µ–¥—ñ—Ç—å –≤–∞—à node ID: " NODE_ID
  local CN; CN=$(container_name_for "$NODE_ID")
  need_docker

  echo -e "\nüß™ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ $CN:"
  echo -e "\nüì§ –°—Ç–∞—Ç—É—Å:"
  docker ps -a --filter "name=$CN"

  echo -e "\nüìú –û—Å—Ç–∞–Ω–Ω—ñ 80 —Ä—è–¥–∫—ñ–≤ –ª–æ–≥—ñ–≤:"
  docker logs --tail 80 "$CN" 2>/dev/null || warn "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ."

  echo -e "\n‚ùó Exit code:"
  docker inspect "$CN" --format='ExitCode: {{.State.ExitCode}}' 2>/dev/null || echo "N/A"

  echo -e "\n‚ùó –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:"
  docker inspect "$CN" --format='Error: {{.State.Error}}' 2>/dev/null || echo "N/A"

  echo -e "\n‚ÑπÔ∏è  –í—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è –∑ attach: Ctrl+P, Ctrl+Q"
  read -rp $'\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é... ' _
}

# --------- loop-mode (–∫–∞—Å—Ç–æ–º–Ω–∏–π –æ–±—Ä–∞–∑) ----------
# –±—É–¥—É—î–º–æ –æ–∫—Ä–µ–º–∏–π –æ–±—Ä–∞–∑, –¥–µ —î /bin/sh; —É—Å–µ—Ä–µ–¥–∏–Ω—ñ —Å—Ç–æ—ó—Ç—å nexus-cli —á–µ—Ä–µ–∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —ñ–Ω—Å—Ç–∞–ª–µ—Ä
setup_loop_mode() {
  read -rp "üîÅ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à NODE ID –¥–ª—è loop‚Äë—Ä–µ–∂–∏–º—É: " NODE_ID
  local CN; CN=$(container_name_for "$NODE_ID")
  local BUILD_DIR="${HOME}/nexus_loop_build_${NODE_ID}"
  local TAG="nexus-loop-cli-${NODE_ID}"

  need_docker
  mkdir -p "$BUILD_DIR"

  # loop.sh ‚Äî POSIX sh, —â–æ–± –Ω–µ –∑–∞–ª–µ–∂–∞—Ç–∏ –≤—ñ–¥ bash —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
  cat > "${BUILD_DIR}/loop.sh" <<'EOF'
#!/bin/sh
set -eu
echo "üîÅ Nexus loop-mode. NODE_ID=${NODE_ID}"
while true; do
  echo "‚ñ∂Ô∏è  –∑–∞–ø—É—Å–∫ nexus-cli..."
  /root/.nexus-network/nexus-network start --node-id "${NODE_ID}"
  echo "üïê –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ø–æ–≤—Ç–æ—Ä–Ω–∏–π —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ ${SLEEP_BETWEEN_RUNS}s..."
  sleep "${SLEEP_BETWEEN_RUNS}"
done
EOF
  chmod 0755 "${BUILD_DIR}/loop.sh"

  # Dockerfile –Ω–∞ –±–∞–∑—ñ Debian + –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —ñ–Ω—Å—Ç–∞–ª–µ—Ä CLI
  cat > "${BUILD_DIR}/Dockerfile" <<EOF
FROM ${LOOP_BASE_IMAGE}
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends curl ca-certificates && rm -rf /var/lib/apt/lists/*
RUN curl --proto '=https' --tlsv1.2 -sSf https://cli.nexus.xyz/ | sh
WORKDIR /root
ENV SLEEP_BETWEEN_RUNS=${SLEEP_BETWEEN_RUNS}
COPY loop.sh /loop.sh
ENTRYPOINT ["/loop.sh"]
EOF

  echo -e "\nüèó  –ó–±—ñ—Ä –æ–±—Ä–∞–∑—É ${TAG}..."
  ( cd "$BUILD_DIR" && docker build -t "$TAG" . )

  echo -e "\nüßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (—è–∫ –±—É–≤)..."
  docker rm -f "$CN" >/dev/null 2>&1 || true

  echo -e "\nüöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${CN} –≤ loop‚Äë—Ä–µ–∂–∏–º—ñ..."
  docker run -dit \
    --restart unless-stopped \
    --name "$CN" \
    -e NODE_ID="$NODE_ID" \
    -e SLEEP_BETWEEN_RUNS="${SLEEP_BETWEEN_RUNS}" \
    "$TAG"

  ok "–ù–æ–¥–∞ $NODE_ID –ø—Ä–∞—Ü—é—î –≤ loop‚Äë—Ä–µ–∂–∏–º—ñ. –õ–æ–≥–∏: docker logs -f $CN"
  read -rp $'\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é... ' _
}

# --------- menu ----------
while true; do
  clear
  echo "==== Nexus Node Manager (–º—É–ª—å—Ç–∏-–Ω–æ–¥–∏, –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, SWAP, –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, loop) ===="
  echo "1) üü¢ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤—É –Ω–æ–¥—É (–∑–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º)"
  echo "2) üîÑ –û–Ω–æ–≤–∏—Ç–∏ –Ω–æ–¥—É"
  echo "3) üìÑ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥–∏"
  echo "4) üóëÔ∏è  –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–¥—É"
  echo "5) ‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–∏/attach –¥–æ –Ω–æ–¥–∏"
  echo "6) üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∏—Ö –Ω–æ–¥"
  echo "7) üîé –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–µ—Ä—Å—ñ—é CLI"
  echo "8) üíæ –£–≤—ñ–º–∫–Ω—É—Ç–∏ SWAP (${SWAP_SIZE_GB}G)"
  echo "9) üß™ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–æ–¥–∏"
  echo "10) üîÅ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–¥—É –≤ LOOP‚Äë—Ä–µ–∂–∏–º—ñ (–∫–∞—Å—Ç–æ–º–Ω–∏–π –æ–±—Ä–∞–∑)"
  echo "11) ‚ùå –í–∏–π—Ç–∏"
  echo "----------------------------------------------------------------------------"
  read -rp "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: " choice

  case "$choice" in
    1) install_node ;;
    2) update_node ;;
    3) show_logs ;;
    4) delete_node ;;
    5) start_node ;;
    6) list_nodes ;;
    7) check_version ;;
    8) make_swap ;;
    9) diagnose_node ;;
    10) setup_loop_mode ;;
    11) echo "üëã –í–∏—Ö—ñ–¥..."; exit 0 ;;
    *) err "–ù–µ–≤—ñ—Ä–Ω–∞ –æ–ø—Ü—ñ—è!"; sleep 2 ;;
  esac
done
